{"ast":null,"code":"import _classCallCheck from \"C:/Users/sofia/OneDrive/Desktop/Coding/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sofia/OneDrive/Desktop/Coding/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/sofia/OneDrive/Desktop/Coding/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sofia/OneDrive/Desktop/Coding/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\sofia\\\\OneDrive\\\\Desktop\\\\Coding\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport Register from \"./components/Register/Register\";\nimport SignIn from \"./components/SignIn/SignIn\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm.js\";\nimport Rank from \"./components/Rank/Rank.js\";\nimport ParticlesBg from \"particles-bg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar app = new Clarifai.App({\n  apiKey: \"5b5ca18952ec43fea336b1c23a7c5c34\"\n});\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nvar PAT = \"6ab21713210c4ef9b7b0c52f4ca6fa88\";\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nvar USER_ID = \"clarifai\";\nvar APP_ID = \"main\";\n// Change these to whatever model and image URL you want to use\nvar MODEL_ID = \"face-detection\";\nvar MODEL_VERSION_ID = \"6dc7e46bc9124c5c8824be4822abe105\";\nvar initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: \"signin\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n};\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n  var _super = _createSuper(App);\n  function App() {\n    var _this;\n    _classCallCheck(this, App);\n    _this = _super.call(this);\n    _this.loadUser = function (data) {\n      _this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    _this.calculateFaceLocation = function (data) {\n      var clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      var image = document.getElementById(\"inputimage\");\n      var width = Number(image.width);\n      var height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    _this.displayFaceBox = function (box) {\n      _this.setState({\n        box: box\n      });\n    };\n    _this.onInputChange = function (event) {\n      _this.setState({\n        input: event.target.value\n      });\n    };\n    _this.onButtonSubmit = function () {\n      _this.setState({\n        imageUrl: _this.state.input\n      });\n\n      // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up.\n\n      var raw = JSON.stringify({\n        user_app_id: {\n          user_id: USER_ID,\n          app_id: APP_ID\n        },\n        inputs: [{\n          data: {\n            image: {\n              url: IMAGE_URL\n            }\n          }\n        }]\n      });\n      var requestOptions = {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: \"Key \" + PAT\n        },\n        body: raw\n      };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(function (response) {\n        return response.text();\n      }).then(function (result) {\n        return console.log(result);\n      }).catch(function (error) {\n        return console.log(\"error\", error);\n      }).then(function (response) {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: _this.state.user.id\n            })\n          }).then(function (response) {\n            return response.json();\n          }).then(function (count) {\n            _this.setState(Object.assign(_this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        _this.displayFaceBox(_this.calculateFaceLocation(response));\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n    _this.onRouteChange = function (route) {\n      if (route === \"signout\") {\n        _this.setState(initialState);\n      } else if (route === \"home\") {\n        _this.setState({\n          isSignedIn: true\n        });\n      }\n      _this.setState({\n        route: route\n      });\n    };\n    _this.state = initialState;\n    return _this;\n  }\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      fetch(\"http://localhost:3001/\").then(function (response) {\n        return response.json();\n      }).catch(console.log);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n        isSignedIn = _this$state.isSignedIn,\n        imageUrl = _this$state.imageUrl,\n        route = _this$state.route,\n        box = _this$state.box;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n          color: \"#fff000\",\n          num: 10,\n          type: \"polygon\",\n          bg: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n          onRouteChange: this.onRouteChange,\n          isSignedIn: isSignedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this), route === \"home\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Rank, {\n            name: this.state.user.name,\n            entries: this.state.user.entries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n            onInputChange: this.onInputChange,\n            onButtonSubmit: this.onButtonSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n            box: box,\n            imageUrl: imageUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this) : route === \"signin\" ? /*#__PURE__*/_jsxDEV(SignIn, {\n          loadUser: this.loadUser,\n          onRouteChange: this.onRouteChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(Register, {\n          loadUser: this.loadUser,\n          onRouteChange: this.onRouteChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n  return App;\n}(Component);\nexport default App;","map":{"version":3,"names":["React","Component","Clarifai","Navigation","Logo","Register","SignIn","FaceRecognition","ImageLinkForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","app","App","apiKey","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","value","onButtonSubmit","state","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","url","IMAGE_URL","requestOptions","method","headers","Accept","Authorization","body","fetch","then","response","text","result","console","log","catch","error","json","count","Object","assign","err","onRouteChange","_createClass","key","componentDidMount","render","_this$state","className","children","color","num","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/sofia/OneDrive/Desktop/Coding/facerecognitionbrain/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport Register from \"./components/Register/Register\";\nimport SignIn from \"./components/SignIn/SignIn\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm.js\";\nimport Rank from \"./components/Rank/Rank.js\";\nimport ParticlesBg from \"particles-bg\";\n\nconst app = new Clarifai.App({\n  apiKey: \"5b5ca18952ec43fea336b1c23a7c5c34\",\n});\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \"6ab21713210c4ef9b7b0c52f4ca6fa88\";\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = \"clarifai\";\nconst APP_ID = \"main\";\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = \"face-detection\";\nconst MODEL_VERSION_ID = \"6dc7e46bc9124c5c8824be4822abe105\";\n\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: \"signin\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\",\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3001/\")\n      .then((response) => response.json())\n      .catch(console.log);\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined,\n      },\n    });\n  };\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n\n    // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n    // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n    // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n    // If that isn't working, then that means you will have to wait until their servers are back up.\n\n    const raw = JSON.stringify({\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID,\n      },\n      inputs: [\n        {\n          data: {\n            image: {\n              url: IMAGE_URL,\n            },\n          },\n        },\n      ],\n    });\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Key \" + PAT,\n      },\n      body: raw,\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\n      \"https://api.clarifai.com/v2/models/\" +\n        MODEL_ID +\n        \"/versions/\" +\n        MODEL_VERSION_ID +\n        \"/outputs\",\n      requestOptions\n    )\n      .then((response) => response.text())\n      .then((result) => console.log(result))\n      .catch((error) => console.log(\"error\", error))\n      .then((response) => {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              id: this.state.user.id,\n            }),\n          })\n            .then((response) => response.json())\n            .then((count) => {\n              this.setState(Object.assign(this.state.user, { entries: count }));\n            });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  onRouteChange = (route) => {\n    if (route === \"signout\") {\n      this.setState(initialState);\n    } else if (route === \"home\") {\n      this.setState({ isSignedIn: true });\n    }\n    this.setState({ route: route });\n  };\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <ParticlesBg color=\"#fff000\" num={10} type=\"polygon\" bg={true} />\n        <Navigation\n          onRouteChange={this.onRouteChange}\n          isSignedIn={isSignedIn}\n        />\n        {route === \"home\" ? (\n          <div>\n            <Logo />\n            <Rank\n              name={this.state.user.name}\n              entries={this.state.user.entries}\n            />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n          </div>\n        ) : route === \"signin\" ? (\n          <SignIn loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n        ) : (\n          <Register\n            loadUser={this.loadUser}\n            onRouteChange={this.onRouteChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}